Parameters:
  amiId:
    Type: AWS::EC2::Image::Id
    Description: Ami Id to be passed in from the pipeline
    Default: 'test'
  os:
    Type: String
    Description: The OS of the Ami
    Default: 'empty'
  ruleArns:
      Type: String
      Description: The ARN's of the rule packages to be used
      Default: arn:aws:inspector:ap-southeast-2:454640832652:rulespackage/0-asL6HRgN # Security Best Practice in ap-southeast-2
  testTime:
      Type: String
      Description: The duration for the inespector test in seconds
      Default: '1200'  # 20 mins
  subnetId:
      Type: String
      Description: The subnet ID for the temporary instance


Conditions:
  OsCheck:
    Fn::Equals:
      - Fn::Sub: ${os}
      - "Windows"

Resources:
  testInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
      RoleName: testInstanceRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"

    testinstancerole:
      Type: AWS:IAM::Role
      Properties:
        ManagedPolicyArns: arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
        RoleName: testinstancerole

  testInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
      RoleName: testinstancerole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"

  testinstanceprofile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
          - testInstanceRole
    DependsOn: testInstanceRole


  testinstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      IamInstanceProfile:
          Ref: testinstanceprofile
      ImageId:
        Fn::Sub: "${amiId}"
      SubnetId:
        Fn::Sub: "${subnetId}"
      Tags:
        - Key: Inspector
          Value: "True"
      UserData:
        Fn::If:
          - OsCheck
          - Fn::Base64:
              Fn::Join:
                - ''
                - - "<powershell> \n"
                  - "Start-Transcript -Path \"C:/UserData.log\" -Append \n"
                  - "Invoke-WebRequest https://inspector-agent.amazonaws.com/windows/installer/latest/AWSAgentInstall.exe -OutFile C:/AWSAgentInstall.exe \n"
                  - "Start-Process -FilePath C:/AWSAgentInstall.exe -ArgumentList \"/install /quiet /norestart\" -Wait -NoNewWindow -PassThru \n"
                  - "</powershell>"
          - Fn::Base64:
              Fn::Join:
                - ''
                - - "#!/bin/bash \n"
                  - "curl -O https://inspector-agent.amazonaws.com/linux/latest/install \n"
                  - "bash install"


  testresourcegroup:
    Type: "AWS::Inspector::ResourceGroup"
    Properties:
      ResourceGroupTags:
        - Key: Inspector
          Value: "True"

  testtargetgroup:
    Type: AWS::Inspector::AssessmentTarget
    Properties:
        AssessmentTargetName : test-targetgroup
        ResourceGroupArn :
          Ref: testresourcegroup

  testtemplate:
    Type: AWS::Inspector::AssessmentTemplate
    Properties:
      AssessmentTargetArn:
        Fn::GetAtt: [ testtargetgroup, Arn ]
      AssessmentTemplateName: test-template
      DurationInSeconds:
          Fn::Sub: "${testTime}"
      RulesPackageArns:
          Fn::Split: [',', Fn::Sub: "${ruleArns}"]


  testeventrule:
    Type: AWS::Events::Rule
    Properties:
      Description: A test event which triggers an inspector template to run
      EventBusName: default
      EventPattern:
        source:
          - "aws.ec2"
        detail-type:
          - EC2 Instance State-change Notification
        detail:
          instance-id:
            -  i-0edde676a3e356b94 # This is hard coded because its a test, normally you would pass in the instance(s) you want inspector to run against on the state change
      State: ENABLED
      Targets:
        - Arn:
            Fn::GetAtt: [testtemplate, Arn]
          Id: test-inspector-template
          RoleArn:
            Fn::GetAtt: [ testeventrole, Arn ]

  testeventrole:
    Type: AWS::IAM::Role
    Properties:
      Description: A test role to allow test-event to call the test-template for inspector
      Path: /
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - events.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Policies:
          - PolicyName: allow-inspector
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:  "inspector:*"
                  Resource: "*"

Outputs:
      TemplateArn:
            Value:
                   Fn::GetAtt: [ testtemplate, Arn ]
      TargetsArn:
            Value:
                   Fn::GetAtt: [ testtargetgroup, Arn ]
      InstanceId:
            Value:
                  Ref: testinstance
